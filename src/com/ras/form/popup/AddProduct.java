package com.ras.form.popup;

import com.ras.database.DatabaseOperation;
import com.ras.entity.Menu;
import com.ras.entity.Product;
import com.ras.entity.Region;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.SwingWorker;
import raven.toast.Notifications;

public class AddProduct extends javax.swing.JPanel {

    /**
     * Creates new form CreateTable
     */
    private Menu menu;
    
    
    public AddProduct(Menu menu) {
        initComponents();
        this.menu = menu;
        comboBoxModel = (DefaultComboBoxModel) comboProduct.getModel();
        setComboBox();
        initializeComboBoxRenderer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboRegion = new com.ras.swing.combobox.RComboBox();
        lbProduct = new javax.swing.JLabel();
        comboProduct = new com.ras.swing.combobox.PComboBox();

        lbProduct.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lbProduct.setText("Product");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbProduct)
                    .addComponent(comboProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
        );
    }// </editor-fold>//GEN-END:initComponents

    private DefaultComboBoxModel comboBoxModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.ras.swing.combobox.PComboBox comboProduct;
    private com.ras.swing.combobox.RComboBox comboRegion;
    private javax.swing.JLabel lbProduct;
    // End of variables declaration//GEN-END:variables






    private void initializeComboBoxRenderer() {
        getComboProduct().setRenderer(new ListCellRenderer<Product>() {
            @Override
            public Component getListCellRendererComponent(JList<? extends Product> list, Product value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel label = new JLabel();
                if (value != null) {
                    label.setText(value.getProductName());
                }
                if (isSelected) {
                    label.setBackground(list.getSelectionBackground());
                    label.setForeground(list.getSelectionForeground());
                } else {
                    label.setBackground(list.getBackground());
                    label.setForeground(list.getForeground());
                }
                label.setOpaque(true);
                return label;
            }
        });
    }

    private void setComboBox() {
        try {

            SwingWorker<ArrayList<Product>, Void> worker;
            worker = new SwingWorker<ArrayList<Product>, Void>() {

                @Override
                protected ArrayList<Product> doInBackground() throws Exception {
                    comboBoxModel.removeAllElements();

                    DatabaseOperation databaseOperation = new DatabaseOperation();
                    ArrayList<Product> productList = databaseOperation.getAllProducts();
                    
                    ArrayList<Product> menuProductList = databaseOperation.getProductListFromMenu(menu);
                   
                    productList.removeAll(menuProductList); // Prevent for adding same products x times. 
                    

                    for (Product p : productList) {
                        comboBoxModel.addElement(p);
                    }
                    
                    

                    getComboProduct().setModel(comboBoxModel);

                    return productList;

                }

                @Override
                protected void done() {
                    try {
                        ArrayList<Product> result = get();
                    } catch (Exception e) {
                        e.printStackTrace();
                        Notifications.getInstance().show(Notifications.Type.ERROR, Notifications.Location.BOTTOM_LEFT, "404 - Error");
                    }
                }
            };

            worker.execute();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @return the comboProduct
     */
    public com.ras.swing.combobox.PComboBox getComboProduct() {
        return comboProduct;
    }

    /**
     * @param comboProduct the comboProduct to set
     */
    public void setComboProduct(com.ras.swing.combobox.PComboBox comboProduct) {
        this.comboProduct = comboProduct;
    }


}
